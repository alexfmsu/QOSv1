# =================================================== DESCRIPTION =====================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== DESCRIPTION =====================================================


# =================================================== EXAMPLES ========================================================
# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------
# =================================================== EXAMPLES ========================================================


# =====================================================================================================================
# system
import re
# =====================================================================================================================
# utils
from utils._assert import Assert
# =====================================================================================================================


def parse_jumps(jumps):
    jumps_parsed = {}

    for k in jumps.keys():
        levels = re.split('<->|-', k)
        Assert(len(levels) == 2, 'len(levels) != 2')

        for i in range(len(levels)):
            try:
                levels[i] = int(levels[i])
            except ValueError as e:
                print('Error:', e)

        levels.sort()
        Assert(levels[0] != levels[1], 'levels[0] == levels[1]')

        key = str(levels[0]) + '<->' + str(levels[1])

        if len(jumps_parsed):
            for i in jumps_parsed.keys():
                Assert(i != key, 'duplicated key')

        jumps_parsed[key] = {
            'value': jumps[k],
            'levels': levels,
        }

    return jumps_parsed
